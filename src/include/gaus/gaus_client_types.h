//The MIT License (MIT)
//
//Copyright 2018, Sony Mobile Communications Inc.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#ifndef UPDATE_CLIENT_C_GAUS_CLIENT_TYPES_H
#define UPDATE_CLIENT_C_GAUS_CLIENT_TYPES_H

#ifdef __cplusplus
extern "C" {
#endif

//Fixme do we want to use http error codes... or make our own or... ?
/*************************************************************//**
 *
 * \brief The type of error specified by a gaus_error_t
 *
 *************************************************************/
typedef enum {
  /*!
   *Http error, check the gaus_error_t::http_error_code and gaus_error_t::description for details.
   */
      GAUS_HTTP_ERROR = 1,
  /*!
   * ::gaus_global_init has not been called
   */
      GAUS_NO_INIT_ERROR,
  /*!
   * ::gaus_global_init was called with something other than gaus_initialization_options_t or with invalid options
   */
      GAUS_BAD_INIT_ERROR,
  /*!
   * An unknown error occurred while attempting to process your request.  Check gaus_error_t::description for details.
   */
      GAUS_UNKNOWN_ERROR  //!<
} gaus_error_type_t;

/*************************************************************//**
 *
 * \brief The error type returned to all gaus_* calls return in the event of an error.
 *
 *************************************************************/
typedef struct {
  /*!
   *
   * Specifies the type of error.  If HTTP error then gaus_error_t::error_code will be filled out.  Otherwise check the
   * description.
   * */
  gaus_error_type_t error_type;
  /*!
   * A network error code if one is known.  See http status codes for a list of potential errors.  In the event
   * that none of these codes is returned, and some other error occurs this will be set to a generic 500 error.
   *
   * For a full list see HTTP Status Codes Wiki](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)
   * */
  int http_error_code;
  /*!
   *
   * Null if no description available or a null terminated description of the error that occurred if one is available.
   * */
  char *description;
} gaus_error_t;


/*************************************************************//**
 *
 * \brief The options object passed into ::gaus_global_init to specify options
 *
 *************************************************************/
typedef struct {
  /*!
   *
   * A weak pointer to a null terminated string specifying the proxy to use if no proxy
   * is used this may be set to NULL.  The library will already respect http_proxy etc.  If you want to explicitly set a
   * proxy you can use this this option.  If you want to override environment proxies to set no proxy you can set it to
   * "".  If default proxy options desired you can pass in NULL.
   * */
  const char *proxy;
} gaus_initialization_options_t;

/*************************************************************//**
 *
 * \brief The session type retrieved from authentication.
 *
 * The session type is used to hold a session that is included for all subsequent calls after \c ::gaus_authenticate.
 *
 *************************************************************/
typedef struct {
  /*!A strong pointer to a null terminated deviceGUID.  This is specific to the device that was registered therefore it
   * is linked to something like a MAC address or a unique serial number. */
  char *device_guid;
  /*! A strong pointer to a null terminated productGUID, this is generated by the gaus
   *  backend during the \c gaus_authenticate call.  It is shared by all devices in a common product line. */
  char *product_guid;
  /*! A weak pointer to a null terminated token.  This is specific to the current session, and was retrieved from the
   *  \c ::gaus_authenticate call.  This is added to the `Authorization: Bearer` of requests.
   */
  char *token;
} gaus_session_t;


/*************************************************************//**
 *
 * \brief A key value pair consisting of two strings.
 *
 * Both the key and value are to be null terminated.
 *
 *************************************************************/
typedef struct {
  char *key; //!< A null terminated key
  char *value; //!< A null terminated value
} gaus_key_value_t;

/*************************************************************//**
 *
 * \brief The update type used when checking for updates.
 *
 * This structure is used when checking the gaus backend for available updates.  Each instance of it describes a single
 * update.
 *
 *************************************************************/
typedef struct {
  /*!
   * Key value string pairs to be used in a way defined by your implementation of Gaus.  These are setup in the server
   * side of Gaus and each customer is responsible for deciding how they want to use these and coordinating between
   * adding them in the admin console and processing them correctly in the client.
   *
   * Set to NULL if there are none, the count available is specified in gaus_update_t::metadata_size
   *
   * These can be used for example to do things like:
   * - Hints for when to update (overnight, immediately, etc)
   * - Specify if an update is mandatory or optional
   * */
  gaus_key_value_t *metadata;
  /*!
   * A count of the metadata items provided.
   * */
  unsigned int metadata_count;
  /*!
   * The size of the update in bytes.
   * */
  unsigned int size;
  /*!
   * A null terminated string specifying of what type this update is.
   * */
  char *update_type;
  /*!
   * A null terminated string specifying of what package type this update has.
   * */
  char *package_type;
  /*!
   * A null terminated string with the md5 checksum
   * */
  char *md5;
  /*!
   * A null terminated 32char string with a unique id for this update.
   *
   * This may be used for status, or error reporting via the ::gaus_report api in order to tie these reports to this
   * specific update.
   *
   * The updateId is shared by all devices making the same update.
   *
   * */
  char *update_id;
  /*!
   * A null terminated string with the new version that this update will result in.
   * */
  char *version;
  /*!
   * A null terminated string with the URL to download this version
   * */
  char *download_url;
} gaus_update_t;


/*************************************************************//**
 *
 * \brief The type used when retrieving the current version of the gaus client library.
 *
 *************************************************************/
typedef struct {
  unsigned int major; //!< The major version of gaus
  unsigned int minor; //!< The minor version of gaus
  unsigned int patch; //!< The patch version of gaus
} gaus_version_t;


/*************************************************************//**
 *
 * \brief A key value string pair to be used when checking for updates.
 *
 * A collection of filtering parameters is specified when checking for update.  These key value string pairs is used to
 * specify what software this device is running and other information about the device for example:
 * - `"firmware-version": "1.0.0"`
 * - `"modem-version":"2.3.4"`
 * - `"dsp-version": "1.2.3"`
 * - `"location": "SE"`
 * - `"building": "Sony Headquarters"`
 * - `"floor-number": "5"`
 *
 * Each gaus_header_filter_t specifies a single filter with a key and a value.
 *
 *************************************************************/
typedef struct {
  /*!
   * A null terminated string with filter name.
   * */
  char *filter_name;
  /*!
   * A null terminated string with a value
   * */
  char *filter_value;
} gaus_header_filter_t;

#ifdef __cplusplus
}
#endif
#endif //UPDATE_CLIENT_C_GAUS_CLIENT_TYPES_H
